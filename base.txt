Cel aplikacji:
Stworzenie interaktywnego dashboardu w Streamlit dla Konsorcjum Innowacji w Stalowej Woli, łączącego:

Wizualizację strategicznych danych z raportu.

Chatbot RAG oparty na treści dokumentu.

Profesjonalny interfejs z integracją sekcji i dynamiczną nawigacją.

Wymagania funkcjonalne:
1. Struktura aplikacji (sidebar):
Sekcje: Streszczenie, Projekty Flagowe, Partnerzy, Finansowanie, KPI, Kontakt, Chatbot.

Responsywny układ: Kolumny z kartami (st.columns + st.expander).

Motyw: Ciemny/niebieski z animowanymi przejściami (CSS + streamlit-lottie).

2. Sekcje główne:
Streszczenie:
Interaktywna mapa Stalowej Woli (pydeck):

Warstwy: Budynek KUL (czerwony marker), HSW (niebieski), SPACELAB (zielony).

Tooltipy z opisami i linkami do sekcji.

Rozwijana analiza SWOT: Tabela z rozszerzanymi komentarzami (st.expander).

Galeria zdjęć: Slider z grafikami technologii kosmicznych/obronnych (st.image + st.slider).

Projekty Flagowe:
Interaktywna tabela (st.dataframe) z filtrami:

Filtrowanie po sektorze (kosmiczny/obronny/cywilny).

Sortowanie po budżecie/terminie.

Wykres Sankey (Plotly): Powiązania między projektami, technologiami i partnerami.

Rozwijane karty projektów: Pełny opis + podświetlenie w mapie.

Partnerzy:
Sieć współpracy (Plotly Graph Objects):

Węzły: NASA, ESA, HSW, uczelnie.

Krawędzie: Grubość linii = intensywność współpracy.

Lista partnerów z logo (st.columns + st.image).

Finansowanie:
Wykres sunburst (Plotly): Struktura budżetu (granty UE 40%, ESA 30%, prywatne 30%).

Symulator alokacji środków:

Suwaki do zmiany wartości grantów.

Live aktualizacja wykresu i KPI.

Harmonogram faz rozwoju (Gantt chart z Plotly).

KPI:
Dashboard w czasie rzeczywistym:

Karty metryk: Liczba patentów | Pozyskane środki | Miejsca pracy.

Wykres trendu: Prognoza na 2025-2030 (dane z Tabeli 6).

Upload pliku CSV (st.file_uploader): Aktualizacja danych.

Kontakt:
Formularz współpracy (st.form): Imię, email, wiadomość + zapis do .csv.

Linki: PDF raportu + ikony społecznościowe (Font Awesome).

3. Chatbot RAG:
Integracja z dokumentem .docx:

Przetwarzanie tekstu: Podział na chunk, embeddings (all-MiniLM-L6-v2), FAISS.

Generacja odpowiedzi: LangChain + GPT-3.5 z podaniem źródłowych fragmentów.

Funkcje:

Podświetlanie cytatów z dokumentu.

Sugestie pytań: "Pokaż projekty flagowe", "Wyjaśnij analizę SWOT".

Integracja z wizualizacjami:

Zapytanie "Pokaż mapę" → automatyczna nawigacja do sekcji Streszczenie.

Zapytanie "Budżet na materiały samonaprawcze" → podświetlenie w wykresie sunburst.

Wymagania techniczne:
python
# requirements.txt
streamlit==1.29.0
pandas==2.1.4
plotly==5.18.0
pydeck==0.8.1
langchain==0.0.346
faiss-cpu==1.7.4
python-docx==0.8.11
openai==0.28.0
sentence-transformers==2.2.2
Architektura:
Przetwarzanie dokumentu:

python
from docx import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter

def load_document():
    doc = Document("Stalowa_Wola_Kosmos_i_Obronnosc.docx")
    return [para.text for para in doc.paragraphs if para.text.strip()]
Chatbot RAG:

python
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
from langchain.chains import RetrievalQA

def setup_rag():
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    chunks = text_splitter.split_documents(load_document())
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    db = FAISS.from_documents(chunks, embeddings)
    return RetrievalQA.from_chain_type(llm=OpenAI(temperature=0), chain_type="stuff", retriever=db.as_retriever())
Integracja z Streamlit:

python
# Przykład dynamicznej nawigacji
if "show_map" in st.session_state and st.session_state.show_map:
    st.experimental_set_query_params(section="Streszczenie")
    st.session_state.show_map = False
Finalny efekt:
Aplikacja działa jak interaktywny "mózg" projektu, gdzie:

Decydenci eksplorują dane poprzez klikalne wizualizacje.

Inwestorzy testują scenariusze finansowe suwakami.

Nowi partnerzy uzyskują odpowiedzi od chatbota w oparciu o dokumentację.